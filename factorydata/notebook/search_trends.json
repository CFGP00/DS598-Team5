{
	"name": "search_trends",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sentiment",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8b30e570-1a38-4a8f-a9b5-b29cf781edfd"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/3b608a14-90b7-42d9-82e2-77c947974137/resourceGroups/DS562-Team-5/providers/Microsoft.Synapse/workspaces/sentiment-analyses/bigDataPools/sentiment",
				"name": "sentiment",
				"type": "Spark",
				"endpoint": "https://sentiment-analyses.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sentiment",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from azure.storage.blob import BlobServiceClient\n",
					"from io import BytesIO\n",
					"import pandas as pd\n",
					"import os\n",
					"\n",
					"# Get connection string\n",
					"connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n",
					"\n",
					"container_name = \"team5container\"\n",
					"blob_path = \"Silver/Search Trends/search_us.csv\" \n",
					"\n",
					"# Connect and download\n",
					"blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n",
					"blob_client = blob_service_client.get_blob_client(container=container_name, blob=blob_path)\n",
					"\n",
					"stream = BytesIO()\n",
					"blob_client.download_blob().readinto(stream)\n",
					"stream.seek(0)\n",
					"\n",
					"# Read CSV into DataFrame\n",
					"df= pd.read_csv(stream)\n",
					"df.head()"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"source": [
					"df.dtypes"
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"source": [
					"df.rename(columns={'Week': 'date'}, inplace=True)\n",
					"df.rename(columns={'iphone: (United States)': 'iphone'}, inplace=True)\n",
					"df.rename(columns={'macbook: (United States)': 'macbook'}, inplace=True)\n",
					"df.rename(columns={'ipad: (United States)': 'ipad'}, inplace=True)"
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"source": [
					"df.head()"
				],
				"execution_count": 41
			},
			{
				"cell_type": "code",
				"source": [
					"df[[\"iphone\", \"macbook\", \"ipad\"]].describe()\n",
					""
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"source": [
					"from scipy.stats import zscore\n",
					"\n",
					"cols = ['iphone', 'macbook', 'ipad']\n",
					"df_z = df.copy()\n",
					"df_z[cols] = df_z[cols].apply(zscore)\n",
					""
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"source": [
					"df_z['sentiment_score'] = df_z[cols].mean(axis=1)\n",
					""
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"source": [
					"def classify_sentiment(score):\n",
					"    if score < -0.3:\n",
					"        return 'negative'\n",
					"    elif score > 0.3:\n",
					"        return 'positive'\n",
					"    else:\n",
					"        return 'neutral'\n",
					"\n",
					"df_z['sentiment'] = df_z['sentiment_score'].apply(classify_sentiment)\n",
					""
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"source": [
					"print(df_z['sentiment'].value_counts())\n",
					""
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"source": [
					"df_z.head()"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"source": [
					"import pyarrow as pa\n",
					"import pyarrow.parquet as pq\n",
					"\n",
					"# 1. Convert pandas DataFrame to Parquet format in memory\n",
					"buffer = BytesIO()\n",
					"table = pa.Table.from_pandas(df_z)\n",
					"pq.write_table(table, buffer)\n",
					"buffer.seek(0)  # Reset buffer position\n",
					"\n",
					"# 2. Define the path within your Gold layer in the container\n",
					"filename = \"Gold/Search Trends/trends_with_sentiment.parquet\"\n",
					"\n",
					"# 3. Initialize BlobServiceClient\n",
					"connection_string = os.getenv(\"AZURE_STORAGE_CONNECTION_STRING\")\n",
					"blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n",
					"blob_client = blob_service_client.get_blob_client(container=\"team5container\", blob=filename)\n",
					"\n",
					"# 4. Upload Parquet file to Blob Storage\n",
					"blob_client.upload_blob(buffer, overwrite=True)\n",
					"print(f\"File uploaded successfully to Blob Storage: {filename}\")\n",
					""
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}